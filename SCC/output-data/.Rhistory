library(readr)
df <- read_delim("C:/Users/Ruben/Downloads/metadata/metadata/1870-1880.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(df)
df$image_url[1]
rect(56, 83, 1552, 5424)
plot(c(0, 1496), c(0, 5341), type= "n", xlab = "", ylab = "")
rect(56, 83, 1552, 5424)
df$paper_title[5]
df_ar = df[df$paper_title == "De TÄ³d : godsdienstig-staatkundig dagblad",]
df_t = df[df$paper_title == "De TÄ³d : godsdienstig-staatkundig dagblad",]
View(df_t)
mean(df_t$w)
plot(c(0, mean(df_t$w)), c(0, mean(df_t$h)), type= "n", xlab = "", ylab = "")
rect(df_t$min_x[i],df_t$min_y[i],df_t$max_x[i],df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1))
df_t$min_x[3]
print(i)
length(df_t)
for(i in seq(1,nrow(df_t))){
rect(df_t$min_x[i], df_t$min_y[i], df_t$max_x[i], df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1))
}
plot(c(0, max(df_t$w)), c(0, max(df_t$h)), type= "n", xlab = "", ylab = "")
for(i in seq(1,nrow(df_t))){
rect(df_t$min_x[i], df_t$min_y[i], df_t$max_x[i], df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1))
}
rect(df_t$min_x[i], df_t$min_y[i], df_t$max_x[i], df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1), border=F)
for(i in seq(1,nrow(df_t))){
rect(df_t$min_x[i], df_t$min_y[i], df_t$max_x[i], df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1), border=F)
}
plot(c(0, max(df_t$h)), c(0, max(df_t$w)), type= "n", xlab = "", ylab = "")
plot(c(0, mean(df_t$h)), c(0, mean(df_t$w)), type= "n", xlab = "", ylab = "")
mean(df_t$h)
mean(df_t$w)
plot( c(0, mean(df_t$w)), c(0, mean(df_t$h)), type= "n", xlab = "", ylab = "")
i = 1
rect(df_t$min_x[i], df_t$min_y[i], df_t$max_x[i], df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1), border=F)
i = 123
rect(df_t$min_x[i], df_t$min_y[i], df_t$max_x[i], df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1), border=F)
plot( c(0, mean(df_t$w)), c(0, mean(df_t$h)), type= "n", xlab = "", ylab = "")
i = 33
rect(df_t$min_x[i], df_t$min_y[i], df_t$max_x[i], df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1), border=F)
df_t$image_url[4]
rect(0, 0, df_t$w[i], df_t$h[i], col= rgb(0,0,1.0,alpha=0.1), border=F)
rect(df_t$min_x[i], df_t$min_y[i], df_t$max_x[i], df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1), border=F)
rect(0, 0, df_t$w[4], df_t$h[4], col= rgb(0,0,1.0,alpha=0.1), border=F)
rect(df_t$min_x[4], df_t$min_y[4], df_t$max_x[4], df_t$max_y[4], col= rgb(0,0,1.0,alpha=0.1), border=F)
plot( c(0, max(df_t$w)), c(0, max(df_t$h)), type= "n", xlab = "", ylab = "")
rect(0, 0, df_t$w[4], df_t$h[4], col= rgb(0,0,1.0,alpha=0.1), border=F)
rect(0, 0, 3819, 5502, col= rgb(0,0,1.0,alpha=0.1), border=F)
plot(c(0, 3819),c(0,5502), col= rgb(0,0,1.0,alpha=0.1), border=F)
plot(c(0, 3819), c(0,5502), type= "n", xlab = "", ylab = "")
rect(df_t$min_x[4], df_t$min_y[4], df_t$max_x[4], df_t$max_y[4], col= rgb(0,0,1.0,alpha=0.1), border=F)
tot_w = 3819
tot_h = 5502
plot(c(0, tot_w), c(0,tot_h), type= "n", xlab = "", ylab = "")
df_t[]
df_t[4]
df_t[4,]
rect(tot_w - df_t$min_x[4]), tot_w - df_t$min_y[4], tot_w - df_t$max_x[4], tot_w - df_t$max_y[4], col= rgb(0,0,1.0,alpha=0.1), border=F)
rect(tot_w - df_t$min_x[4], tot_w - df_t$min_y[4], tot_w - df_t$max_x[4], tot_w - df_t$max_y[4], col= rgb(0,0,1.0,alpha=0.1), border=F)
df_t = df_t[df_t$page_id == df_t$page_id[1],]
plot( c(0, max(df_t$w)), c(0, max(df_t$h)), type= "n", xlab = "", ylab = "")
for(i in 1:6){
rect(df_t$min_x[i], df_t$min_y[i], df_t$max_x[i], df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1), border=F)
}
?text
df_t$ocr[1][0:3]
for(i in 1:6){
rect(df_t$min_x[i], df_t$min_y[i], df_t$max_x[i], df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1), border=F)
text(df_t$max_x[i], df_t$max_y[i], labels = paste(i))
}
plot( c(0, max(df_t$w)), c(0, max(df_t$h)), type= "n", xlab = "", ylab = "")
for(i in 1:6){
rect(df_t$min_x[i], df_t$min_y[i], df_t$max_x[i], df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1), border=F)
text(df_t$max_x[i], df_t$max_y[i], labels = paste(i))
}
for(i in 1:6){
rect(df_t$min_x[i], df_t$min_y[i], df_t$max_x[i], df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1), border=F)
}
plot( c(0, max(df_t$w)), c(0, max(df_t$h)), type= "n", xlab = "", ylab = "")
for(i in 1:6){
rect(df_t$min_x[i], df_t$min_y[i], df_t$max_x[i], df_t$max_y[i], col= rgb(0,0,1.0,alpha=0.1), border=F)
}
length(unique(df$issue_id))
length(df$issue_id)
print(length(issue_ss))
for(issue in df$issue_id){
issue_ss = df[df$issue_id == issue]
print(length(issue_ss))
}
for(issue in df$issue_id){
issue_ss = df[df$issue_id == issue,]
print(length(issue_ss))
}
for(issue in df$issue_id){
issue_ss = df[df$issue_id == issue,]
print(issue)
}
unique(issue_id)
unique(df$issue_id)
for(issue in unique(df$issue_id)){
issue_ss = df[df$issue_id == issue,]
print(issue)
}
t = c(0,3,5,1,4)
which.min(t)
smallest = data.frame(matrix(0,0,2))
for(issue in unique(df$issue_id)){
issue_ss = df[df$issue_id == issue,]
dim_articles = c()
for(art_no in 1:length(issue_ss)){
dim = issue_ss$w * issue_ss$h
dim_articles = c(dim_articles, dim)
article_id = issue_ss$id[which.min(dim_articles),]
tmp = c(issue, article_id)
smallest = rbind(smallest, tmp)
}
}
for(issue in unique(df$issue_id)){
issue_ss = df[df$issue_id == issue,]
dim_articles = c()
for(art_no in 1:length(issue_ss)){
dim = issue_ss$w * issue_ss$h
dim_articles = c(dim_articles, dim)
article_id = issue_ss$id[which.min(dim_articles)]
tmp = c(issue, article_id)
smallest = rbind(smallest, tmp)
}
}
View(smallest)
list_issues = c()
list_artid = c()
for(issue in unique(df$issue_id)){
issue_ss = df[df$issue_id == issue,]
dim_articles = c()
for(art_no in 1:length(issue_ss)){
dim = issue_ss$w * issue_ss$h
dim_articles = c(dim_articles, dim)
article_id = issue_ss$id[which.min(dim_articles)]
list_issues = c(list_issues, issue)
list_artid = c(list_artid, article_id)
}
}
data.frame(list_issues, list_artid)
smallest = data.frame(list_issues, list_artid)
View(smallest)
smallest[!duplicated(smallest),]
smallest = smallest[!duplicated(smallest),]
View(smallest)
View(df)
df$image_url
smallest$img_url = ""
list_img_urls = c()
for(id in smallest$list_artid){
tmp = df[df$id == id,]
tmp = tmp$image_url[1]
list_img_urls = c(list_img_urls, tmp)
}
smallest$img_url = list_img_urls
View(smallest)
smallest$img_url
write_csv(smallest, "smal_ads.csv", sep = ',')
write_csv(smallest, "smal_ads.csv")
getwd()
smallest[0:10]
smallest$img_url[0:10]
## Ruben Ros December 2018 ## r.s.ros@students.uu.nl | rubenros@live.nl ##
library(wordVectors)
library(ggplot2)
library(udpipe)
library(stringr)
library(reshape2)
library(RColorBrewer)
setwd("~/GitHub/TheForeign/SCC/output-data")
w2v_model <- read.vectors("model-whole.bin", binary = T)
## SET LANGUAGE AND DOWNLOAD POS TAGGER ##
l = "dutch"
dl <- udpipe_download_model(language = l)
udmodel_pos <- udpipe_load_model(file = dl$file_model)
tag_f <- function(arg1) {
x <- as.data.frame(udpipe_annotate(udmodel_pos, x = arg1, tagger = "default", parser = "none") )
tags <- paste(x$token, sep = '_', x$upos)
tags
}
df <- read.csv("bigrams_buitenlandsche.csv", sep = ",")
tfd <- function(input,input_df, s_year, e_year, model){
df <- read.csv(input_df, sep = ",")
df[is.na(df)] <- 0
w <- as.character(closest_to(model, input, 20)$word[2:20])
for(i in seq(1,19,1)){
tmp <- as.character(closest_to(model, w[i], 20)$word[2:20])
w <- c(w,tmp)
}
w <- tag_f(w)
w <- w[grepl("NOUN", w)]
w <- gsub("_NOUN", "", w)
w <- w[duplicated(w)]
wc <- as.numeric(length(unique(w)))
w <- unique(w)
totals = as.data.frame(colSums(df[,c(2:as.numeric(ncol(df)))]))
totals$year = as.numeric(gsub("X","", rownames(totals)))
colnames(totals) = c("total", "year")
ss <- df[df[,1] %in% w,]
words <- as.character(ss$ngram)
ss <- setNames(data.frame(t(ss[,-1])), ss[,1])
ss$year <- totals$year
for(i in 1:as.numeric(ncol(ss) - 1)){
ss[,i] = ss[,i] / totals$total * 100
}
ss <- melt(ss, id.vars = "year")
ss[is.na(ss)] <- 0
ss$value <- as.numeric(ss$value)
ss <- ss[ss$year >= s_year & ss$year <= e_year,]
graph_max <- as.numeric(max(ss$value))
cols <- colorRampPalette(brewer.pal(12, "Set3"))
myPal <- cols(as.numeric(length(unique(ss$variable))))
ggplot(ss, aes(year, value, fill = variable)) + geom_area() +
xlab('years') +
ylab('Relative Frequency (compared to all bigrams in that year)') +
ggtitle(paste0("Combined Relative Frequency of Words Most Similar to: ", input)) +
guides(fill=guide_legend(title="Words")) +
scale_x_continuous(expand = c(0,0), limits = c(s_year,e_year)) +
scale_y_continuous(expand = c(0,0), limits = c(0,graph_max)) +
scale_fill_manual(values = myPal)
} #input_df must be a file name: "total-en-bigrams.csv" or "total-ne-bigrams.csv"
tfd("geschil", "bigrams_internationale.csv", 1815, 1915, w2v_model)
tfd("toestand", "bigrams_internationale.csv", 1815, 1915, w2v_model)
if(paste0(word, "en") %in% df$ngram){print(paste0(word " | ", paste0(word, "en")))}
for(ngram in df$ngram){
word = ngram
if(paste0(word, "en") %in% df$ngram){print(paste0(word))}
}
tfd("soevereinen", "bigrams_internationale.csv", 1815, 1915, w2v_model)
tfd("soeverein", "bigrams_internationale.csv", 1815, 1915, w2v_model)
tfd("overheid", "bigrams_internationale.csv", 1815, 1915, w2v_model)
df$type = ""
which(df$ngram == "kracht")
which(df$ngram == "krachten")
df$ngram[which(df$ngram == "krachten")]
df$type = ""
for(i in 1:2522){
word = df$ngram[i]
if(paste0(word, "en") %in% df$ngram){
rn_ev = which(df$ngram == word)
df$type[rn_ev] = "ev"
rn_mv = which(df$ngram == paste0(word, "en"))
df$type[rn_mv] = "mv"
}
}
View(df)
df$ngram[df$type == "mv"]
tmp_mv = df[df$type == "mv",]
tmp_ev = df[df$type == "ev",]
rowSums(tmp_mv[,c(2:101)])
tmp_mv= rowSums(tmp_mv[,c(2:101)])
tmp_ev= rowSums(tmp_ev[,c(2:101)])
tmp_tot = rowSums(df[,c(2:101)])
dfc = as.data.frame(colnames(df)[2:101])
View(dfc)
dfc$mv = tmp_mv
dfc$ev = tmp_ev
dfc$tot = tmp_tot
tmp_tot = rowSums(df[,c(2:101)])
tmp_mv = df[df$type == "mv",]
tmp_ev = df[df$type == "ev",]
View(tmp_ev)
View(tmp_mv)
which(colnames(tmp_ev) not %in% colnames(tmp_mv))
which(!colnames(tmp_ev) %in% colnames(tmp_mv))
colnames(tmp_ev)
colnames(tmp_mv)
tmp_mv = df[df$type == "mv",]
tmp_ev = df[df$type == "ev",]
tmp_mv= colSums(tmp_mv[,c(2:101)])
tmp_ev= colSums(tmp_ev[,c(2:101)])
tmp_tot = colSums(df[,c(2:101)])
dfc = as.data.frame(colnames(df)[2:101])
dfc$mv = tmp_mv
dfc$ev = tmp_ev
dfc$tot = tmp_tot
View(dfc)
dfc$mv = dfc$mv / dfc$tot * 100
dfc$ev = dfc$ev / dfc$tot * 100
colnames(dfc)[1] = c("year")
dfc = dfc[,-4]
dfc = melt(dfc, id.vars = 'year')
ggplot(dfc, aes(x=year, y=value, fill = variable)) + geom_are()
ggplot(dfc, aes(x=year, y=value, fill = variable)) + geom_area()
dfc$year = as.numeric(gsub("X", "", dfc$year))
ggplot(dfc, aes(x=year, y=value, fill = variable)) + geom_area()
